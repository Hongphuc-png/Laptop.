# -*- coding: utf-8 -*-
"""lap.demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tKmbY5JVUm3hOCqFXQg7kfgSfw3tvvs2
"""

import pandas as pd

# Load the data into a pandas DataFrame
# Replace 'your_data.csv' with the actual path to your CSV file
df = pd.read_csv('Tester.csv')

print("/content/Tester.csv")
# Optionally, you can create a dummy DataFrame for demonstration
# df = pd.DataFrame({
#     'YeuToBaoHanh': [1, 2, 3, 4, 5],
#     'YeuToGia': [5, 4, 3, 2, 1],
#     'YeuToKhuyenMai': [3, 4, 5, 1, 2],
#     'YeuToTocDoXuLy': [2, 3, 4, 5, 1],
#     'YeuToUyTinNhaBanle': [4, 5, 1, 2, 3],
#     'YeuToThuongHieuSP': [1, 2, 3, 4, 5],
#     'YeuToCauHinh': [5, 1, 2, 3, 4],
#     'YeuToThietKe': [3, 4, 5, 1, 2],
#     'YeuToBaoMat': [2, 3, 4, 5, 1],
#     'MucDoHaiLong': [5, 4, 3, 2, 1]
# })

import pandas as pd
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np # Import numpy

# Factor importance correlation matrix
factor_cols = ['YeuToBaoHanh', 'YeuToGia', 'YeuToKhuyenMai',
'YeuToTocDoXuLy', 'YeuToUyTinNhaBanle', 'YeuToThuongHieuSP',
'YeuToCauHinh', 'YeuToThietKe', 'YeuToBaoMat']
correlation_matrix = df[factor_cols + ['MucDoHaiLong']].corr()
display(correlation_matrix)

# --------------------
# Correlation Analysis
# --------------------


plt.figure(figsize=(12, 8))
numeric_df = df.select_dtypes(include=[np.number])
correlation_matrix = numeric_df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix of Numerical Variables')
plt.tight_layout()
plt.show()

if 'SalePrice' in df.columns:
    print("'SalePrice' column found in the DataFrame.")

    # Clean the 'SalePrice' column: remove 'VND', commas, and convert to numeric
    df['SalePrice'] = df['SalePrice'].astype(str).str.replace('VND', '').str.replace(',', '').str.strip()
    df['SalePrice'] = pd.to_numeric(df['SalePrice'], errors='coerce')

    # Drop rows where 'SalePrice' could not be converted to numeric
    df.dropna(subset=['SalePrice'], inplace=True)


    # Now re-calculate the correlation matrix including 'SalePrice'
    factor_cols_with_salesprice = factor_cols + ['SalePrice']
    correlation_matrix_with_salesprice = df[factor_cols_with_salesprice + ['MucDoHaiLong']].corr()
    display(correlation_matrix_with_salesprice)

    # Get the correlation between 'YeuToKhuyenMai' and 'SalePrice'
    correlation_value_salesprice = correlation_matrix_with_salesprice.loc['YeuToKhuyenMai', 'SalePrice']
    print(f"\nThe correlation between 'YeuToKhuyenMai' and 'SalePrice' is: {correlation_value_salesprice}")

else:
    print("'SalePrice' column not found in the DataFrame. Please check the column names in your dataset.")
    display(df.columns)

    plt.figure(figsize=(20, 12))
numeric_df = df.select_dtypes(include=[np.number])
correlation_matrix = numeric_df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix of Numerical Variables')
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np # Import numpy for checking numeric types

import seaborn as sns
import matplotlib.pyplot as plt

# Create a scatter plot
plt.figure(figsize=(8, 6))
sns.scatterplot(x='YeuToKhuyenMai', y='SalePrice', data=df)
plt.title('Relationship between YeuToKhuyenMai and SalePrice')
plt.xlabel('YeuToKhuyenMai')
plt.ylabel('SalePrice')
plt.show()

# Calculate and display the correlation matrix of the DataFrame
correlation_matrix = df.corr()
display(correlation_matrix)

df.shape

df.info()

df.describe

#Vẽ pairplot
sns.pairplot(numeric_df.corr())
plt.show

#Single Linear Regression
#Chạy các biến có tương quan cao
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

#Giả sử df là DataFrame
X = df[['YeuToKhuyenMai']]
y = df[['SalePrice']]

#Chia dữ liệu thành tập huấn luyện (training) và tập kiểm tra (test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Chuẩn hóa dữ liệu
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Xây dựng mô hình hồi quy tuyến tính
model = LinearRegression()
model.fit(X_train_scaled, y_train)

#Dự đoán kết quả
y_pred = model.predict(X_test_scaled)

#Đánh giá mô hình
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared Value: {r2}")
print(f"Coefficients:\n{model.coef_}")
print(f"Intercept: {model.intercept_}")
print(f"Coefficient of determination: {r2_score(y_test, y_pred)}")
print (f"Mean Squared error: {mean_squared_error(y_test, y_pred)}")


#Phương trình hồi quy
print(f"SalePrice = {round(model.intercept_[0],2)} + {round(model.coef_[0][0],2)} * YeuToKhuyenMai (scaled)")


#Vẽ đồ thị so sánh giữa giá trị thực tế và giá trị dự đoán
plt.scatter(X_test_scaled, y_test, color= 'blue', label='Actual Value')
plt.plot(X_test_scaled, y_pred, color= 'red', linewidth=2, label= 'Predicted Value')
plt.title('Actual vs Predicted SalePrice (Scaled YeuToKhuyenMai)')
plt.xlabel('YeuToKhuyenMai (Scaled)')
plt.ylabel('SalePrice')
plt.grid(True)
plt.legend()
plt.show()

#Multiple Linear Regression
#Chạy các biến có tương quan cao
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

#Giả sử df là DataFrame
X = df[['MucDoHaiLong','YeuToThuongHieuSP','YeuToCauHinh','YeuToTocDoXuLy']]
y = df[['SalePrice']]

#Chia dữ liệu thành tập huấn luyện (training) và tập kiểm tra (test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Chuẩn hóa dữ liệu
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#Xây dựng mô hình hồi quy tuyến tính
model = LinearRegression()
model.fit(X_train_scaled, y_train)

#Dự đoán kết quả
y_pred = model.predict(X_test_scaled)

#Đánh giá mô hình
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared Value: {r2}")
print(f"Coefficients:\n{model.coef_}")
print(f"Intercept: {model.intercept_}")
print(f"Coefficient of determination: {r2_score(y_test, y_pred)}")
print (f"Mean Squared error: {mean_squared_error(y_test, y_pred)}")


#Phương trình hồi quy
print(f"SalePrice = {round(model.intercept_[0],2)} + {round(model.coef_[0][0],2)} * YeuToKhuyenMai (scaled)")


#Vẽ đồ thị so sánh giữa giá trị thực tế và giá trị dự đoán
plt.scatter(y_test, y_pred, color= 'blue', label='True Values')
plt.title('True Values vs Predictions')
plt.xlabel('True Values')
plt.ylabel('Predictions')
plt.grid(True)
plt.legend()
plt.show()